use hacspec_gimli::*;
use hacspec_lib::prelude::*;

/*

- Non-KAT test cases in this file have been generated randomly
- Python code to generate a random test case of `inlen` length:

    inlen = 16 # length of random input
    inp = array.create_random(inlen, uint8)
    print("Input Array:", inp)
    print("Hash:", gimli_hash(inp, inlen))

*/

#[test]
fn kat_gimli_hash() {
    let input = ByteSeq::from_public_slice(&[1, 2, 3, 4, 5, 6]);
    let expected = Digest::from_public_slice(&[
        0x4b, 0xb0, 0xf3, 0x12, 0x6a, 0x57, 0x10, 0x5, 0x6, 0x9c, 0x52, 0x9a, 0xfb, 0x86, 0x9f,
        0x12, 0x5d, 0xae, 0x60, 0x65, 0x71, 0x6, 0xe1, 0x4d, 0x22, 0x27, 0xc9, 0xb3, 0xec, 0x78,
        0x7b, 0xd3,
    ]);
    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);

    let input = ByteSeq::from_public_slice(&[
        0x46, 0xad, 0xcf, 0xac, 0x5a, 0x4f, 0xc2, 0x52, 0xc1, 0x50, 0xf6, 0x9c, 0x7d, 0x5c, 0x19,
        0x21, 0xba, 0xac, 0x32, 0x79, 0x2e, 0x90, 0xfe, 0x4e, 0x3b, 0x5b, 0x38, 0xec, 0xbd, 0x3d,
        0x71, 0x75, 0x36, 0x19, 0x5, 0xe, 0x54, 0x94, 0xf4, 0xf5, 0x70, 0x9, 0x45, 0xa, 0x25, 0x3f,
        0x2a, 0xe1, 0x70, 0x8, 0xd0, 0xb5, 0x17, 0xb2, 0x77, 0xba, 0x22, 0xb8, 0x83, 0x63, 0xdb,
        0xee, 0xec, 0x47, 0x49, 0x9b, 0xba, 0x6b, 0x54, 0xf9, 0x24, 0xc5, 0xb1, 0xf3, 0xf2, 0xd2,
        0x73, 0x96, 0x10, 0xf2, 0xd1, 0xa4, 0xf6, 0xef, 0x82, 0x9c, 0xbc, 0x3e, 0x8, 0xe5, 0x6,
        0xf1, 0x4a, 0xaa, 0x60, 0xe5, 0x3e, 0x6a, 0x29, 0x90,
    ]);
    let expected = Digest::from_public_slice(&[
        0x66, 0xae, 0xd3, 0xd, 0x9c, 0xd0, 0x37, 0x67, 0x30, 0x89, 0x34, 0xe6, 0xb2, 0xb9, 0xb5,
        0xb, 0xb, 0x7c, 0x64, 0x9, 0xca, 0x91, 0x76, 0xb3, 0x2d, 0xfb, 0xc3, 0x82, 0x8d, 0x17,
        0xeb, 0x57,
    ]);
    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash() {
    // Test 1 (16 length input)
    let input = ByteSeq::from_public_slice(&[
        0xb7, 0x63, 0x28, 0xae, 0x5b, 0x62, 0x91, 0xa6, 0x92, 0x17, 0x99, 0x1a, 0x61, 0xe9, 0x4e,
        0x9c,
    ]);
    let expected = Digest::from_public_slice(&[
        0xb1, 0xef, 0xf6, 0xc4, 0x46, 0xcc, 0xba, 0x70, 0x65, 0xe0, 0xd1, 0x6a, 0xf6, 0x95, 0xf3,
        0x70, 0x2b, 0x8f, 0x20, 0x4c, 0xf7, 0x53, 0x1c, 0x4c, 0xd, 0x30, 0x72, 0x4d, 0x1a, 0x8b,
        0x53, 0x1f,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);

    // Test 2 (32 length input)
    let input = ByteSeq::from_public_slice(&[
        0xcb, 0xc8, 0x28, 0x60, 0x9f, 0xa5, 0x56, 0xdd, 0x6b, 0x97, 0x9d, 0xbc, 0x4e, 0xca, 0x5,
        0x42, 0x2, 0xab, 0xdd, 0xad, 0xb9, 0xf4, 0x1d, 0x1f, 0xc3, 0xac, 0xc2, 0x35, 0xbb, 0x4a,
        0x47, 0xb7,
    ]);
    let expected = Digest::from_public_slice(&[
        0xc8, 0x4a, 0xc4, 0x74, 0x1a, 0x26, 0x82, 0xa3, 0x47, 0xa6, 0x6e, 0x57, 0x20, 0xd1, 0x91,
        0x61, 0x98, 0x51, 0x58, 0x5d, 0x81, 0x35, 0x2, 0xeb, 0x61, 0x37, 0xaf, 0xe5, 0x15, 0x2,
        0x2e, 0xe8,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_1() {
    let input = ByteSeq::from_public_slice(&[0xe9]);
    let expected = Digest::from_public_slice(&[
        0x7a, 0xbb, 0x25, 0x8, 0x6c, 0xa9, 0x9f, 0x5d, 0xaf, 0x96, 0xca, 0x11, 0x81, 0xb1, 0x71,
        0xa, 0x66, 0x52, 0x3b, 0x49, 0x69, 0x21, 0xae, 0x13, 0xda, 0x43, 0xad, 0xa, 0x27, 0x30,
        0x9f, 0xd,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_2() {
    let input = ByteSeq::from_public_slice(&[0xbd, 0x3c]);
    let expected = Digest::from_public_slice(&[
        0x37, 0x73, 0x5c, 0x2e, 0x1c, 0x8b, 0x77, 0xf6, 0x8e, 0x10, 0xc8, 0x11, 0x8e, 0x78, 0x9f,
        0xe7, 0xef, 0xfa, 0x73, 0x5a, 0xc5, 0x89, 0xd9, 0x63, 0x21, 0xad, 0xd3, 0x4, 0x48, 0xbd,
        0xe1, 0x6,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_3() {
    let input = ByteSeq::from_public_slice(&[0xf7, 0xb, 0xca]);
    let expected = Digest::from_public_slice(&[
        0x55, 0x84, 0xd3, 0xc2, 0x1, 0x8b, 0x54, 0xda, 0xf7, 0xce, 0x5d, 0x51, 0xb5, 0x90, 0xe7,
        0x99, 0x81, 0x67, 0xb0, 0x2a, 0x54, 0x81, 0x54, 0xce, 0x8a, 0x55, 0xba, 0x4b, 0x90, 0xac,
        0xd2, 0xc7,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_4() {
    let input = ByteSeq::from_public_slice(&[0xa5, 0xd, 0xef, 0x75]);
    let expected = Digest::from_public_slice(&[
        0x62, 0x3f, 0xbf, 0x49, 0xe8, 0xd6, 0x10, 0xeb, 0x3a, 0xca, 0xbd, 0x43, 0x31, 0xc2, 0xf8,
        0x2f, 0xd4, 0x36, 0x5d, 0x32, 0x60, 0x3b, 0x58, 0x4, 0x47, 0xcb, 0xcb, 0x59, 0x1c, 0xdd,
        0x70, 0xa0,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_5() {
    let input = ByteSeq::from_public_slice(&[0x70, 0x36, 0x20, 0x72, 0x9f]);
    let expected = Digest::from_public_slice(&[
        0x9c, 0x14, 0x3b, 0x3e, 0xab, 0x4d, 0xb3, 0xf3, 0x76, 0x39, 0x6c, 0xcb, 0xc0, 0x43, 0x8c,
        0x59, 0xaf, 0x4f, 0x6b, 0xea, 0xc4, 0x10, 0x87, 0x36, 0x1c, 0x3a, 0xde, 0x31, 0x93, 0x2,
        0xb, 0xf9,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_6() {
    let input = ByteSeq::from_public_slice(&[0xbe, 0xef, 0xb9, 0x6d, 0x4, 0x49]);
    let expected = Digest::from_public_slice(&[
        0x75, 0xb8, 0xa7, 0xed, 0xc8, 0xff, 0x88, 0x42, 0x4f, 0x13, 0x2b, 0x15, 0xdb, 0x53, 0xc3,
        0x56, 0x86, 0xbe, 0x2f, 0x2b, 0x52, 0x8d, 0x83, 0x94, 0xdf, 0x0, 0x3f, 0x22, 0xfb, 0xf0,
        0x38, 0x35,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_7() {
    let input = ByteSeq::from_public_slice(&[0xc1, 0x1f, 0xd9, 0x8b, 0x19, 0x7a, 0xb2]);
    let expected = Digest::from_public_slice(&[
        0x6c, 0xa4, 0xc9, 0xcd, 0xd3, 0xa4, 0x23, 0x96, 0xc2, 0xa6, 0x25, 0x25, 0xb2, 0xe7, 0xb4,
        0xe, 0x1c, 0xb, 0xfb, 0xa9, 0x84, 0x68, 0xae, 0x81, 0xa0, 0x2a, 0x7e, 0x4a, 0xfd, 0xe,
        0x95, 0x5a,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_8() {
    let input = ByteSeq::from_public_slice(&[0x3f, 0x15, 0xf4, 0x2e, 0xaa, 0xc7, 0x61, 0x2d]);
    let expected = Digest::from_public_slice(&[
        0x5d, 0xd7, 0x3b, 0xa4, 0x2e, 0xa9, 0x38, 0x9d, 0xe5, 0x9c, 0xfd, 0x11, 0xdf, 0xd3, 0xf7,
        0x58, 0x68, 0x78, 0xfa, 0x1e, 0x23, 0x52, 0xa3, 0xbc, 0xd4, 0xe4, 0xfa, 0x2a, 0x32, 0x80,
        0x95, 0x2e,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_9() {
    let input = ByteSeq::from_public_slice(&[0xcf, 0xeb, 0x38, 0xf, 0x14, 0x99, 0x90, 0x8, 0x57]);
    let expected = Digest::from_public_slice(&[
        0x25, 0xe9, 0x67, 0x58, 0x8e, 0xdb, 0xae, 0x6a, 0x11, 0xd3, 0x10, 0x43, 0x9d, 0x4b, 0xa3,
        0x9c, 0x75, 0x94, 0x63, 0x83, 0xdb, 0xb6, 0xbe, 0x51, 0xf5, 0x77, 0x1e, 0xff, 0xe5, 0x1e,
        0x4c, 0xb9,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_10() {
    let input =
        ByteSeq::from_public_slice(&[0xac, 0xaf, 0x69, 0x0, 0xd2, 0xb6, 0x23, 0x51, 0x70, 0xe6]);
    let expected = Digest::from_public_slice(&[
        0x1a, 0x9f, 0x66, 0x6a, 0xa1, 0x28, 0x40, 0x86, 0xb1, 0x55, 0x2d, 0x3, 0x8b, 0xec, 0x3b,
        0x5d, 0x81, 0x53, 0xe0, 0xed, 0x23, 0x60, 0x55, 0x8, 0x6, 0x24, 0x78, 0xb5, 0xb0, 0x97,
        0xec, 0x88,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_11() {
    let input = ByteSeq::from_public_slice(&[
        0xd4, 0xab, 0xb0, 0xcf, 0x87, 0x95, 0x94, 0x8, 0x2b, 0x87, 0xb4,
    ]);
    let expected = Digest::from_public_slice(&[
        0x59, 0xb6, 0x8a, 0xfa, 0xab, 0x61, 0x7c, 0x29, 0x58, 0xa0, 0xd, 0x5f, 0x23, 0xed, 0x9b,
        0x59, 0x7a, 0xe1, 0xdb, 0x86, 0xdf, 0xd3, 0x96, 0xeb, 0x26, 0xf1, 0xd9, 0x47, 0x49, 0xee,
        0x75, 0xdf,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_12() {
    let input = ByteSeq::from_public_slice(&[
        0x40, 0x9a, 0xcb, 0x70, 0xfd, 0xf4, 0xf5, 0x6b, 0x71, 0x27, 0xc, 0x59,
    ]);
    let expected = Digest::from_public_slice(&[
        0x15, 0xf7, 0x6f, 0xce, 0x21, 0x9a, 0x28, 0x79, 0xb8, 0x8b, 0x31, 0x9, 0x94, 0xac, 0x69,
        0xcb, 0x4f, 0xe6, 0x0, 0xcb, 0x27, 0x66, 0x9f, 0xb, 0xbb, 0xb1, 0x9d, 0xa4, 0x75, 0x35,
        0xdc, 0xb9,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_13() {
    let input = ByteSeq::from_public_slice(&[
        0x31, 0x3, 0x24, 0xae, 0x27, 0xb5, 0x28, 0x65, 0x66, 0x57, 0x0, 0xe3, 0x53,
    ]);
    let expected = Digest::from_public_slice(&[
        0x2a, 0xad, 0xc9, 0xf9, 0x1c, 0x98, 0xd3, 0x45, 0x6c, 0x10, 0x47, 0x96, 0x6a, 0xac, 0x78,
        0x91, 0x40, 0xe0, 0xd9, 0x73, 0x33, 0x88, 0x40, 0xa5, 0x7d, 0xe6, 0xcc, 0xee, 0x62, 0xec,
        0x8a, 0x33,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_14() {
    let input = ByteSeq::from_public_slice(&[
        0x86, 0x96, 0xe, 0x47, 0x8a, 0x18, 0xa4, 0x10, 0xb5, 0xf8, 0x56, 0xe1, 0x40, 0x5d,
    ]);
    let expected = Digest::from_public_slice(&[
        0x1a, 0x70, 0x29, 0x8e, 0x76, 0xc0, 0xeb, 0x18, 0xf, 0xc3, 0x8d, 0x38, 0x19, 0x19, 0x68,
        0x98, 0x47, 0xe1, 0x20, 0x96, 0x29, 0x36, 0x35, 0x50, 0xc3, 0x4e, 0xae, 0x91, 0xe0, 0x33,
        0x41, 0x1d,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_15() {
    let input = ByteSeq::from_public_slice(&[
        0xf6, 0x38, 0x7e, 0x63, 0xfd, 0x59, 0xc3, 0x75, 0x2d, 0x1a, 0x8a, 0x77, 0xca, 0xb7, 0xc7,
    ]);
    let expected = Digest::from_public_slice(&[
        0xa9, 0xac, 0x6d, 0x63, 0x63, 0xf6, 0x9c, 0x8e, 0x7a, 0x36, 0xc7, 0x7c, 0x74, 0xc4, 0xf,
        0x7, 0x89, 0x4a, 0xd8, 0xe3, 0x7b, 0x15, 0x61, 0x5b, 0x8a, 0xd, 0xdd, 0xf3, 0xf7, 0xac,
        0xc8, 0x5a,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_16() {
    let input = ByteSeq::from_public_slice(&[
        0xa1, 0x0, 0x7d, 0xcb, 0x58, 0xbb, 0x9f, 0x92, 0xd5, 0x91, 0x30, 0x66, 0xba, 0xcd, 0x2d,
        0x4a,
    ]);
    let expected = Digest::from_public_slice(&[
        0x19, 0x96, 0xd3, 0xb0, 0x79, 0xa2, 0xc5, 0xad, 0x3a, 0x2b, 0xab, 0x7b, 0xab, 0x4a, 0x3a,
        0x23, 0x48, 0x14, 0xaf, 0xa6, 0xa2, 0x18, 0xe5, 0xe3, 0x15, 0xfb, 0x17, 0x66, 0x64, 0x46,
        0xf4, 0xdc,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_17() {
    let input = ByteSeq::from_public_slice(&[
        0x96, 0x23, 0xb5, 0xe9, 0x12, 0x88, 0x89, 0x75, 0x47, 0xae, 0xe0, 0xe1, 0xda, 0x3a, 0xa1,
        0xc5, 0x89,
    ]);
    let expected = Digest::from_public_slice(&[
        0x97, 0x22, 0x36, 0xc4, 0x80, 0x40, 0x2c, 0x54, 0xf4, 0x48, 0x9c, 0xe1, 0xd, 0xc1, 0x10,
        0xe7, 0x78, 0x54, 0x61, 0x13, 0x36, 0x6b, 0x62, 0xf6, 0x8d, 0x26, 0xa3, 0x92, 0x42, 0x58,
        0x94, 0xde,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_18() {
    let input = ByteSeq::from_public_slice(&[
        0xf3, 0xd2, 0xf8, 0x28, 0xff, 0xd4, 0x83, 0xec, 0xfa, 0x2, 0x48, 0xe2, 0x6a, 0x2d, 0x8f,
        0xf8, 0xd7, 0x2a,
    ]);
    let expected = Digest::from_public_slice(&[
        0x75, 0x70, 0x58, 0x8f, 0x10, 0x68, 0x2c, 0xa5, 0x20, 0xc0, 0x82, 0xcd, 0xea, 0x45, 0xe7,
        0x17, 0xd9, 0x45, 0xef, 0x4c, 0x2d, 0x4c, 0x39, 0xf2, 0x2, 0x8e, 0x11, 0xbe, 0x37, 0x3c,
        0x28, 0xfd,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_19() {
    let input = ByteSeq::from_public_slice(&[
        0x30, 0xb3, 0x96, 0x99, 0x37, 0xbf, 0xf4, 0xd2, 0x52, 0x57, 0x71, 0xe7, 0x76, 0x72, 0xf7,
        0x58, 0xb5, 0x58, 0x25,
    ]);
    let expected = Digest::from_public_slice(&[
        0x51, 0xfc, 0xcd, 0x6c, 0x47, 0x69, 0xde, 0xc5, 0x4, 0xea, 0x7b, 0x1b, 0xb, 0xb9, 0x47,
        0x39, 0xd2, 0xc9, 0xef, 0xd9, 0x4c, 0x45, 0xd3, 0xba, 0x4a, 0xb4, 0x1b, 0x30, 0xd2, 0xbd,
        0x4d, 0x8c,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_20() {
    let input = ByteSeq::from_public_slice(&[
        0x11, 0x14, 0x42, 0x1e, 0x74, 0x2a, 0xe9, 0x9d, 0x67, 0x4f, 0xbd, 0x75, 0x6f, 0x92, 0xdc,
        0x25, 0x72, 0x65, 0x4a, 0x36,
    ]);
    let expected = Digest::from_public_slice(&[
        0xf0, 0xeb, 0x7a, 0xa8, 0x89, 0x78, 0x15, 0x25, 0x47, 0x76, 0x6f, 0xa4, 0x4f, 0x2a, 0x22,
        0x94, 0x24, 0x64, 0xf7, 0x44, 0x83, 0x25, 0xbe, 0xb4, 0x9a, 0xa6, 0xb, 0x6d, 0x62, 0xb3,
        0xc5, 0xca,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_21() {
    let input = ByteSeq::from_public_slice(&[
        0x14, 0x83, 0x2f, 0xf7, 0x18, 0x70, 0x94, 0xd4, 0xf9, 0xe5, 0x55, 0xa4, 0x37, 0x36, 0xd6,
        0x43, 0xa, 0x33, 0xc, 0x35, 0x3b,
    ]);
    let expected = Digest::from_public_slice(&[
        0xdf, 0x41, 0xc8, 0x92, 0x27, 0xd5, 0x79, 0xd7, 0x0, 0x75, 0x55, 0x38, 0x16, 0xfe, 0xfd,
        0x23, 0x50, 0xdb, 0x37, 0x1b, 0x4b, 0xc4, 0xce, 0x60, 0x26, 0xe6, 0x19, 0xd1, 0xb6, 0x73,
        0xca, 0x43,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_22() {
    let input = ByteSeq::from_public_slice(&[
        0xeb, 0x52, 0x65, 0xf4, 0xce, 0xa8, 0xb9, 0x31, 0xe1, 0xc2, 0xcc, 0xbb, 0xbe, 0x9a, 0x3e,
        0xf1, 0xa1, 0xe9, 0xda, 0x82, 0x19, 0x3a,
    ]);
    let expected = Digest::from_public_slice(&[
        0xd1, 0x79, 0x31, 0xf0, 0x20, 0xab, 0x2d, 0x6d, 0xca, 0x99, 0x95, 0x21, 0x98, 0xcf, 0x3b,
        0xc9, 0x20, 0x99, 0x74, 0xc3, 0x66, 0x3, 0x52, 0xd9, 0x24, 0x24, 0x64, 0x57, 0xd6, 0x24,
        0xe3, 0xae,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_23() {
    let input = ByteSeq::from_public_slice(&[
        0xc6, 0x78, 0x2c, 0xdb, 0xf3, 0x62, 0x96, 0x9e, 0x61, 0x4f, 0x8c, 0x81, 0x4b, 0x25, 0x95,
        0x6a, 0x4, 0x12, 0xea, 0xc8, 0x1c, 0xca, 0x2d,
    ]);
    let expected = Digest::from_public_slice(&[
        0x68, 0xcf, 0x4e, 0x7f, 0x7, 0x4, 0x1f, 0xd4, 0xf4, 0x84, 0x25, 0x62, 0x84, 0x31, 0xce,
        0x44, 0xa4, 0xd, 0xf6, 0x26, 0xe7, 0x2b, 0xd4, 0x33, 0x94, 0xed, 0xcf, 0x7, 0x88, 0xdd,
        0xa2, 0x12,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_24() {
    let input = ByteSeq::from_public_slice(&[
        0x15, 0x98, 0x6d, 0xaa, 0xc0, 0xb1, 0x23, 0xa, 0x5f, 0x1b, 0x70, 0xdf, 0x10, 0x6a, 0x22,
        0x6e, 0xc5, 0x9, 0xcf, 0xf, 0xd8, 0x19, 0x92, 0x59,
    ]);
    let expected = Digest::from_public_slice(&[
        0x12, 0xb6, 0x89, 0x75, 0xf8, 0x8a, 0xba, 0xb3, 0x25, 0xe, 0x27, 0xa7, 0x6e, 0x77, 0xa3,
        0x5e, 0x88, 0x9b, 0xc1, 0x9e, 0xfe, 0x3, 0x5d, 0xd0, 0x1b, 0x10, 0xb7, 0xd0, 0x33, 0x32,
        0x18, 0xe4,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_25() {
    let input = ByteSeq::from_public_slice(&[
        0x71, 0x57, 0x7f, 0xa6, 0x18, 0x14, 0xdf, 0xdc, 0x25, 0x9d, 0xb8, 0x69, 0xc8, 0xc, 0xba,
        0x15, 0xbe, 0xd2, 0xfe, 0xbb, 0xdf, 0xf4, 0xb4, 0x42, 0x58,
    ]);
    let expected = Digest::from_public_slice(&[
        0xea, 0xf3, 0x7f, 0xb3, 0x3a, 0x69, 0x56, 0x75, 0x81, 0x14, 0x96, 0x29, 0xb3, 0x6, 0xe5,
        0x2, 0xba, 0x43, 0xec, 0xa4, 0xb1, 0xd6, 0x8b, 0xf1, 0x6d, 0x78, 0x9, 0x25, 0x75, 0x4c,
        0x4d, 0x59,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_26() {
    let input = ByteSeq::from_public_slice(&[
        0x52, 0xa1, 0x76, 0x73, 0x9d, 0x43, 0x3f, 0xb1, 0xcc, 0xea, 0xfe, 0x4f, 0xc7, 0x6c, 0x54,
        0x75, 0xc9, 0x1c, 0x26, 0xb0, 0x3b, 0x96, 0xb5, 0x2a, 0x97, 0xc4,
    ]);
    let expected = Digest::from_public_slice(&[
        0xad, 0x7e, 0xf0, 0xcf, 0x7, 0x6c, 0x36, 0x93, 0x77, 0x2a, 0x1e, 0xe4, 0xa9, 0xfc, 0xed,
        0xca, 0xca, 0x3a, 0xb6, 0x92, 0x1a, 0x75, 0x48, 0x7e, 0x4e, 0xb6, 0x18, 0xce, 0xaf, 0xd9,
        0x15, 0xd7,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_27() {
    let input = ByteSeq::from_public_slice(&[
        0x3c, 0x6c, 0x5, 0x15, 0xd6, 0x3b, 0x38, 0x56, 0x60, 0x32, 0x41, 0x4b, 0x33, 0xd, 0x89,
        0x4, 0x5f, 0x57, 0xaa, 0xb1, 0xd8, 0x6, 0xc8, 0xb5, 0x7f, 0xac, 0x97,
    ]);
    let expected = Digest::from_public_slice(&[
        0x2f, 0xc4, 0x52, 0x96, 0x61, 0xc9, 0x2, 0xf3, 0xc2, 0x26, 0xbc, 0x3f, 0x9b, 0xce, 0x25,
        0xcd, 0x8b, 0x7c, 0xf9, 0x30, 0xe1, 0xcd, 0x57, 0x7c, 0xa0, 0x5f, 0x6, 0x3b, 0x14, 0x9d,
        0xfd, 0x44,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_28() {
    let input = ByteSeq::from_public_slice(&[
        0xfc, 0xbb, 0xa0, 0xa4, 0x63, 0x36, 0xc5, 0xc, 0xe5, 0xf0, 0xb9, 0x35, 0x76, 0xdd, 0xed,
        0x30, 0x60, 0xdb, 0x79, 0x84, 0x3d, 0x53, 0xd1, 0x7c, 0xe, 0x61, 0x5c, 0xab,
    ]);
    let expected = Digest::from_public_slice(&[
        0x93, 0x12, 0x8f, 0x94, 0x78, 0xec, 0xae, 0xd3, 0xa7, 0xbf, 0x53, 0x8a, 0x7d, 0x2a, 0x2b,
        0xfc, 0xb3, 0x2f, 0xfc, 0x66, 0x1c, 0x6d, 0xcd, 0x95, 0xa6, 0xfe, 0x64, 0xb3, 0x3b, 0x53,
        0x6e, 0xe2,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_29() {
    let input = ByteSeq::from_public_slice(&[
        0x25, 0x8c, 0xf8, 0x6f, 0x91, 0x99, 0x16, 0x9d, 0x51, 0xcd, 0x19, 0xe4, 0x2e, 0xe, 0x98,
        0x51, 0x90, 0xc2, 0x15, 0x8c, 0xc1, 0x58, 0x31, 0x32, 0x22, 0xd6, 0x99, 0x4e, 0x40,
    ]);
    let expected = Digest::from_public_slice(&[
        0x7e, 0x2f, 0x93, 0x3e, 0xea, 0x97, 0xa, 0xc4, 0x89, 0x9b, 0x36, 0xc3, 0x8e, 0x7b, 0x3b,
        0x53, 0xce, 0xd7, 0x87, 0x6c, 0x84, 0xa2, 0xeb, 0x25, 0xe6, 0x2, 0x2f, 0x4c, 0xf5, 0xbb,
        0xde, 0x10,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_30() {
    let input = ByteSeq::from_public_slice(&[
        0x31, 0x0, 0x9d, 0x41, 0xaf, 0xda, 0xf5, 0xdc, 0xec, 0xd5, 0xf9, 0x73, 0x20, 0x32, 0xe,
        0x97, 0xb2, 0xca, 0xf5, 0x60, 0x6e, 0xc8, 0x63, 0x3f, 0x4b, 0xa2, 0x47, 0x78, 0x3, 0x91,
    ]);
    let expected = Digest::from_public_slice(&[
        0x39, 0xa0, 0x1f, 0x5f, 0xec, 0x73, 0xce, 0xad, 0x7b, 0xc8, 0x4c, 0x5, 0xc3, 0x81, 0xdb,
        0xf0, 0xdd, 0xac, 0xb, 0x8e, 0x3c, 0xc6, 0x31, 0xc6, 0xf7, 0x7a, 0x46, 0x79, 0xe7, 0x60,
        0x15, 0x90,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_31() {
    let input = ByteSeq::from_public_slice(&[
        0x79, 0xe, 0xb7, 0x7e, 0x3e, 0xaa, 0x6f, 0x39, 0x68, 0x54, 0x2c, 0x56, 0xb7, 0xfd, 0xba,
        0x9f, 0xba, 0xa9, 0xb9, 0xd7, 0x9, 0x1c, 0x84, 0x18, 0x62, 0xe5, 0xd5, 0x29, 0x80, 0xf4,
        0xbc,
    ]);
    let expected = Digest::from_public_slice(&[
        0x5e, 0xf8, 0x2b, 0x37, 0x76, 0xd4, 0xe7, 0xae, 0x88, 0x60, 0x39, 0xba, 0x51, 0xfb, 0x1c,
        0x77, 0x7, 0x4e, 0x11, 0x47, 0x73, 0x31, 0x0, 0xef, 0xda, 0x2f, 0x7b, 0x38, 0x4, 0x9, 0xda,
        0xf8,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_32() {
    let input = ByteSeq::from_public_slice(&[
        0x26, 0x65, 0xb0, 0xca, 0x30, 0x3f, 0xf6, 0xc2, 0x88, 0xfe, 0x1d, 0xff, 0x3d, 0x40, 0x34,
        0x41, 0x3d, 0x46, 0xd7, 0xf6, 0xf0, 0x46, 0x23, 0xde, 0x24, 0x70, 0x7d, 0xcb, 0xd7, 0x38,
        0xe3, 0x48,
    ]);
    let expected = Digest::from_public_slice(&[
        0xb2, 0x46, 0x3c, 0x23, 0x7d, 0xd3, 0xcf, 0x4, 0x46, 0x56, 0xcf, 0xd3, 0x88, 0x54, 0xc0,
        0x2a, 0x6d, 0xc9, 0xf9, 0x83, 0x50, 0xde, 0x44, 0xec, 0xdd, 0x0, 0x2b, 0xff, 0x70, 0xeb,
        0x95, 0xe8,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_33() {
    let input = ByteSeq::from_public_slice(&[
        0x61, 0x98, 0xbb, 0x9e, 0xf5, 0xce, 0x86, 0x69, 0x3b, 0x74, 0xac, 0x55, 0xc1, 0x30, 0x21,
        0xb9, 0x30, 0xa0, 0x55, 0x9b, 0x54, 0xff, 0xe5, 0xd2, 0x5e, 0xb5, 0x2b, 0x68, 0x9e, 0xf4,
        0x4, 0x77, 0xcc,
    ]);
    let expected = Digest::from_public_slice(&[
        0x93, 0xd0, 0xc9, 0x18, 0xf8, 0xea, 0x66, 0x10, 0x7f, 0x55, 0x15, 0x7e, 0xb0, 0x24, 0x7c,
        0x7e, 0x23, 0x6c, 0xcf, 0x1, 0xfe, 0xb5, 0x84, 0xa8, 0xd0, 0xa3, 0x2e, 0x57, 0xfb, 0x79,
        0xea, 0x8f,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_34() {
    let input = ByteSeq::from_public_slice(&[
        0xf2, 0xef, 0x64, 0x6a, 0xc6, 0x7c, 0x7a, 0xa5, 0x68, 0x19, 0xc8, 0x0, 0xbd, 0xc5, 0x40,
        0x60, 0x4f, 0x7c, 0xc5, 0x5c, 0x75, 0xcc, 0xc4, 0x2, 0xba, 0x9a, 0x67, 0x30, 0x4, 0x61,
        0xd, 0xf4, 0x1e, 0x96,
    ]);
    let expected = Digest::from_public_slice(&[
        0xc1, 0x25, 0xc9, 0x26, 0x69, 0x9, 0xe2, 0xfe, 0x2d, 0xfb, 0xf6, 0x1c, 0xf5, 0xbf, 0x69,
        0xb5, 0xa6, 0x58, 0x96, 0x1d, 0x3d, 0x79, 0x8, 0x48, 0x1d, 0x17, 0x6a, 0xb4, 0x41, 0xc6,
        0x15, 0xc5,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_35() {
    let input = ByteSeq::from_public_slice(&[
        0x9a, 0xc, 0x61, 0x1d, 0xde, 0x55, 0x7f, 0xa, 0x12, 0x8f, 0x12, 0x4e, 0x36, 0x6c, 0xb3,
        0xb7, 0x13, 0xd8, 0x85, 0x63, 0xe5, 0x98, 0xf1, 0xd2, 0xe9, 0xb2, 0xbc, 0xfe, 0x31, 0x9,
        0x27, 0x24, 0x6c, 0xa, 0xbe,
    ]);
    let expected = Digest::from_public_slice(&[
        0xcc, 0xcd, 0xc9, 0x11, 0x76, 0xf7, 0xf3, 0x1c, 0x1d, 0xe6, 0xb0, 0x66, 0xb4, 0xff, 0x30,
        0xe8, 0x3, 0xce, 0xfa, 0xca, 0x3c, 0x86, 0x70, 0x2c, 0x3d, 0xdd, 0xae, 0xd9, 0xff, 0x39,
        0x75, 0xb7,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_36() {
    let input = ByteSeq::from_public_slice(&[
        0x3c, 0x58, 0x76, 0xa1, 0x68, 0xcd, 0xde, 0x81, 0x2f, 0x5f, 0x8c, 0x33, 0xdc, 0x36, 0x46,
        0xd, 0xe1, 0x50, 0xa, 0xd3, 0x53, 0xba, 0xaa, 0x2f, 0x26, 0xcd, 0xc, 0x30, 0xd8, 0xdc,
        0xd1, 0x75, 0xe, 0x8f, 0xf7, 0x9a,
    ]);
    let expected = Digest::from_public_slice(&[
        0x96, 0x6d, 0xe7, 0xba, 0x9d, 0x82, 0x7c, 0xdd, 0x36, 0xfe, 0x21, 0x91, 0x12, 0xb9, 0x68,
        0x37, 0xbd, 0x6e, 0x15, 0x42, 0xf, 0x30, 0x1b, 0x90, 0xad, 0xde, 0xe6, 0x7d, 0x83, 0xe3,
        0x6f, 0xf6,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_37() {
    let input = ByteSeq::from_public_slice(&[
        0xf7, 0x45, 0xad, 0xc5, 0x92, 0x5f, 0xd0, 0x85, 0xed, 0x4b, 0x35, 0x47, 0xea, 0x9f, 0xea,
        0xbc, 0xb4, 0xa6, 0x1a, 0xb2, 0xc8, 0x3a, 0xf3, 0x56, 0xbe, 0x97, 0xfa, 0x2a, 0xb, 0x3a,
        0xe5, 0xe0, 0xe4, 0x54, 0x36, 0x93, 0x1c,
    ]);
    let expected = Digest::from_public_slice(&[
        0x45, 0x20, 0xef, 0x62, 0xa5, 0x0, 0x3d, 0xfb, 0x81, 0x2d, 0xa7, 0xea, 0xaf, 0xd4, 0xa5,
        0x3d, 0x43, 0x28, 0x9d, 0x43, 0x53, 0x1, 0xaa, 0x3c, 0x17, 0xa2, 0x71, 0x33, 0x22, 0xf1,
        0x9b, 0xda,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_38() {
    let input = ByteSeq::from_public_slice(&[
        0x10, 0xcb, 0x48, 0x9a, 0xf5, 0x7a, 0xbd, 0x8a, 0x93, 0xae, 0xac, 0x87, 0xae, 0xab, 0x1b,
        0xd3, 0x86, 0x52, 0xcf, 0x6e, 0x14, 0xdf, 0xe, 0x20, 0x80, 0x21, 0xa0, 0x9e, 0xab, 0x83,
        0xdd, 0x1e, 0x4f, 0x6b, 0x1c, 0x51, 0x53, 0x67,
    ]);
    let expected = Digest::from_public_slice(&[
        0x49, 0x4a, 0x5, 0xf4, 0x18, 0xa, 0x4f, 0x4f, 0xec, 0x59, 0x76, 0xe6, 0x8d, 0xf6, 0x0,
        0xb1, 0x90, 0xdf, 0x9a, 0x68, 0x44, 0x71, 0x2f, 0xc7, 0xea, 0x60, 0x7c, 0xd0, 0x1b, 0x71,
        0x17, 0x7a,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_39() {
    let input = ByteSeq::from_public_slice(&[
        0x39, 0xeb, 0xf, 0x42, 0xe2, 0xd4, 0xd7, 0x21, 0xe4, 0xa9, 0x6e, 0xad, 0xde, 0xcc, 0x30,
        0x46, 0xc2, 0x98, 0xd, 0xb5, 0x25, 0xf3, 0x25, 0xb2, 0xa8, 0x7e, 0xc, 0x0, 0xf9, 0x4c,
        0x2d, 0x81, 0x25, 0x38, 0x2a, 0xe2, 0xc6, 0xd7, 0x4b,
    ]);
    let expected = Digest::from_public_slice(&[
        0x63, 0xc4, 0x37, 0xac, 0x6b, 0x3d, 0xe7, 0xbb, 0x89, 0x63, 0x5d, 0xa, 0x29, 0x41, 0xf2,
        0x9a, 0xa3, 0x45, 0x88, 0x33, 0x28, 0xc3, 0x5a, 0x44, 0xaa, 0xf5, 0x2c, 0xa9, 0x35, 0x55,
        0x46, 0x17,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_40() {
    let input = ByteSeq::from_public_slice(&[
        0xfd, 0x21, 0xfb, 0x54, 0xda, 0x60, 0xa9, 0x67, 0xd, 0xef, 0x6b, 0x8d, 0xce, 0x7a, 0x91,
        0x83, 0x5c, 0xbc, 0x66, 0x80, 0x7, 0xa2, 0x5e, 0xdf, 0x74, 0xc0, 0xc1, 0x32, 0xfc, 0x38,
        0x71, 0xb7, 0xe4, 0x62, 0xb1, 0x35, 0x3a, 0x78, 0xdd, 0xc8,
    ]);
    let expected = Digest::from_public_slice(&[
        0xc7, 0xcc, 0x10, 0x8b, 0xf9, 0x4f, 0xff, 0x87, 0x6, 0xc, 0x3, 0x4d, 0xaf, 0xe, 0x4d, 0xc2,
        0xdd, 0x95, 0x6c, 0xc0, 0x8a, 0x49, 0xb9, 0x65, 0x4d, 0xc1, 0xb2, 0xbf, 0x29, 0x1, 0x82,
        0x4b,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_41() {
    let input = ByteSeq::from_public_slice(&[
        0x38, 0x41, 0xc9, 0xb, 0x42, 0xfb, 0x1, 0xa7, 0x60, 0xbd, 0x6, 0xc7, 0xe1, 0xfb, 0x76,
        0x42, 0x84, 0x21, 0x9c, 0xf2, 0xff, 0xba, 0x4d, 0x0, 0xc2, 0x55, 0xb0, 0x38, 0x66, 0xf7,
        0x60, 0xc2, 0xdc, 0x7a, 0x49, 0x8f, 0xc0, 0xbc, 0x28, 0x24, 0x64,
    ]);
    let expected = Digest::from_public_slice(&[
        0xbf, 0x60, 0xec, 0x46, 0xe7, 0x2d, 0x7, 0x27, 0x6, 0xfd, 0xc6, 0x35, 0x52, 0x38, 0xf6,
        0x86, 0x23, 0x82, 0x27, 0xff, 0x75, 0x5, 0x8b, 0xb5, 0x67, 0x3b, 0x81, 0x2a, 0xc, 0xf,
        0x9e, 0x1,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_42() {
    let input = ByteSeq::from_public_slice(&[
        0x32, 0xea, 0xfa, 0x5d, 0x57, 0xfb, 0x1f, 0x86, 0xd, 0x66, 0x12, 0xe3, 0xaf, 0xe8, 0xc,
        0x53, 0x6c, 0xa, 0xf0, 0x17, 0x53, 0x9f, 0x5, 0xd9, 0x8, 0xfb, 0x4f, 0x32, 0x5e, 0xa0,
        0x27, 0xe8, 0xde, 0x67, 0x27, 0x2a, 0xc9, 0x47, 0xba, 0x58, 0x21, 0x52,
    ]);
    let expected = Digest::from_public_slice(&[
        0x32, 0xfc, 0xbd, 0x50, 0xeb, 0x93, 0x58, 0x65, 0x2e, 0xc3, 0x8d, 0xb4, 0xb0, 0x99, 0x55,
        0x50, 0xe1, 0x46, 0xef, 0x16, 0xc7, 0x68, 0x61, 0x22, 0xb3, 0x56, 0xd2, 0xde, 0x7c, 0x6,
        0xe9, 0x48,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_43() {
    let input = ByteSeq::from_public_slice(&[
        0x8, 0x5d, 0x50, 0x4b, 0x2c, 0x16, 0xa3, 0x33, 0xfe, 0x73, 0x77, 0xf7, 0x10, 0x50, 0xa1,
        0x5e, 0x90, 0x0, 0x75, 0x56, 0x18, 0x8e, 0x6, 0xdf, 0xdd, 0xce, 0x9d, 0x12, 0xad, 0x51,
        0x75, 0x72, 0xf6, 0x98, 0xd8, 0xd9, 0x87, 0xec, 0x73, 0x52, 0xcc, 0xe0, 0x42,
    ]);
    let expected = Digest::from_public_slice(&[
        0x95, 0xd5, 0x93, 0x37, 0x23, 0xa9, 0xf6, 0x81, 0x2b, 0x31, 0xee, 0xf, 0x8d, 0x97, 0x80,
        0x8f, 0x4a, 0x54, 0x94, 0x2b, 0x33, 0x36, 0x60, 0xa2, 0xb1, 0x10, 0x94, 0x43, 0x15, 0xf7,
        0x28, 0xcb,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_44() {
    let input = ByteSeq::from_public_slice(&[
        0xd9, 0x8e, 0xda, 0x1, 0xb8, 0xa3, 0x2d, 0xcb, 0x2b, 0xfb, 0xc9, 0xfd, 0x72, 0xbd, 0xf4,
        0xe0, 0xee, 0x48, 0xaf, 0x62, 0xdd, 0x51, 0x59, 0x76, 0x12, 0xc, 0xe6, 0x84, 0x74, 0xa,
        0x4f, 0x1a, 0xdd, 0x84, 0xf, 0xb5, 0xdc, 0x8c, 0x58, 0x51, 0x14, 0x48, 0xbd, 0xe0,
    ]);
    let expected = Digest::from_public_slice(&[
        0xc0, 0x6c, 0x10, 0x26, 0x21, 0x73, 0xcd, 0x63, 0x8, 0x88, 0xaf, 0x88, 0x5e, 0xd2, 0xae,
        0x60, 0xb4, 0x59, 0x3e, 0x13, 0x49, 0xfa, 0x1a, 0x7c, 0x17, 0x6c, 0xaa, 0x22, 0x4b, 0xbc,
        0xa5, 0xf2,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_45() {
    let input = ByteSeq::from_public_slice(&[
        0x25, 0xe, 0xe4, 0x97, 0x50, 0x9f, 0x69, 0x45, 0x29, 0xbd, 0x28, 0xa8, 0x39, 0xc2, 0x55,
        0x8c, 0xde, 0x9f, 0xea, 0x8, 0x3f, 0x62, 0x29, 0x30, 0x3a, 0x43, 0xe9, 0x6d, 0x41, 0x42,
        0x3f, 0xe2, 0x73, 0x23, 0xac, 0x2c, 0xfd, 0xae, 0x47, 0x2c, 0xae, 0x7a, 0xb1, 0xc3, 0xea,
    ]);
    let expected = Digest::from_public_slice(&[
        0xf3, 0xcf, 0x2b, 0x35, 0xb2, 0xe3, 0x96, 0x67, 0x70, 0xd9, 0x7a, 0xfb, 0xaf, 0xdf, 0xed,
        0xaf, 0xa2, 0xc1, 0xf3, 0x2c, 0x8, 0xc5, 0xba, 0x64, 0x15, 0x1f, 0xbc, 0x9d, 0x64, 0xd8,
        0xd4, 0xd9,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_46() {
    let input = ByteSeq::from_public_slice(&[
        0x20, 0x82, 0xdd, 0x8b, 0xae, 0x73, 0xa4, 0xd1, 0x17, 0xdc, 0xd4, 0x5a, 0xc5, 0x3e, 0x2,
        0x35, 0x57, 0x3, 0x5e, 0x78, 0x20, 0xd4, 0x37, 0x3c, 0x0, 0xaa, 0x3b, 0xe2, 0xd2, 0xcd,
        0xe0, 0x83, 0xf3, 0xf2, 0x2d, 0x69, 0xa5, 0x1f, 0xf2, 0xa3, 0x3e, 0x3d, 0xd1, 0xf8, 0xdd,
        0xf8,
    ]);
    let expected = Digest::from_public_slice(&[
        0xcd, 0x82, 0x35, 0xbb, 0xe8, 0xda, 0xe4, 0x36, 0xbe, 0x2, 0x23, 0xa8, 0x3f, 0xf7, 0x44,
        0x63, 0xb8, 0xd1, 0x3b, 0x5, 0x93, 0x56, 0x9a, 0x98, 0xeb, 0xea, 0xdb, 0x29, 0xa4, 0x6d,
        0x3b, 0xd0,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_47() {
    let input = ByteSeq::from_public_slice(&[
        0xb, 0x58, 0x4c, 0x5c, 0x68, 0xd9, 0x14, 0x7, 0xa5, 0x14, 0x82, 0x54, 0x6b, 0x32, 0x9f,
        0xe6, 0x17, 0xab, 0x83, 0x7c, 0xbf, 0x83, 0xd4, 0x9a, 0x80, 0x9e, 0xa5, 0x98, 0xfa, 0xc9,
        0x42, 0x3c, 0x3a, 0x6c, 0xbd, 0x17, 0x8e, 0x79, 0xd0, 0x77, 0xac, 0xfd, 0xf9, 0x1c, 0x98,
        0x69, 0x3d,
    ]);
    let expected = Digest::from_public_slice(&[
        0x33, 0xc7, 0x94, 0x58, 0x3e, 0xfb, 0xaa, 0x8e, 0xd3, 0x90, 0xbb, 0xe1, 0x3d, 0xd1, 0x7,
        0xd7, 0x8, 0x1d, 0x8c, 0x50, 0x29, 0xc3, 0xc3, 0x73, 0xeb, 0xc6, 0xb2, 0xf3, 0xc, 0x57,
        0x69, 0x88,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_48() {
    let input = ByteSeq::from_public_slice(&[
        0x4d, 0x9e, 0x58, 0x81, 0x2a, 0xcc, 0x5e, 0xe4, 0x85, 0x8c, 0x20, 0xcf, 0x90, 0x4e, 0x8e,
        0xc1, 0xb5, 0x8, 0xbe, 0x4a, 0x7e, 0x8d, 0xff, 0x58, 0x35, 0x76, 0x87, 0x58, 0x34, 0x35,
        0xcb, 0x78, 0xc, 0x55, 0x91, 0xae, 0xaf, 0xb6, 0x8e, 0xbe, 0x9b, 0xe4, 0x26, 0x6d, 0x18,
        0xe1, 0xe4, 0x39,
    ]);
    let expected = Digest::from_public_slice(&[
        0xcb, 0x13, 0xb4, 0x92, 0x53, 0x7d, 0x13, 0xce, 0xdc, 0x38, 0x11, 0x90, 0xd5, 0x31, 0x3a,
        0xcf, 0xce, 0x0, 0xd7, 0x59, 0x48, 0xc2, 0x80, 0x39, 0xb2, 0x9, 0xf0, 0x63, 0xd9, 0x2a,
        0x79, 0x16,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_49() {
    let input = ByteSeq::from_public_slice(&[
        0xdf, 0x49, 0x94, 0xa2, 0xc4, 0xe2, 0x43, 0xf8, 0x93, 0x17, 0x9a, 0xe7, 0xd3, 0x49, 0x15,
        0x86, 0x71, 0x45, 0x40, 0xd9, 0xed, 0xa1, 0x42, 0x4c, 0xb9, 0x1a, 0x57, 0x95, 0x3, 0xf2,
        0xe5, 0xcf, 0xe2, 0xc8, 0x46, 0x4f, 0x68, 0x0, 0x4f, 0xb9, 0x6f, 0xfb, 0x76, 0xfc, 0x26,
        0x45, 0x5f, 0x83, 0xb1,
    ]);
    let expected = Digest::from_public_slice(&[
        0xb6, 0x8e, 0xa7, 0xc8, 0x1d, 0xe8, 0x71, 0x91, 0xc9, 0x2c, 0xc4, 0xe8, 0x9c, 0xe6, 0x9f,
        0xd0, 0x47, 0xb1, 0x31, 0x34, 0x2b, 0xe4, 0x25, 0x6a, 0x5d, 0x8c, 0xca, 0x22, 0xcf, 0x7b,
        0xa1, 0xde,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_50() {
    let input = ByteSeq::from_public_slice(&[
        0x84, 0x33, 0xe3, 0xf4, 0x85, 0x3b, 0x85, 0xf7, 0x85, 0xa9, 0x4e, 0x7f, 0x40, 0x13, 0xe7,
        0x4c, 0xde, 0xcd, 0xff, 0x74, 0xc2, 0xe2, 0x82, 0x1a, 0x76, 0x3c, 0x0, 0x87, 0x7c, 0xee,
        0x44, 0xd1, 0x8f, 0x3e, 0xb4, 0xf, 0x3f, 0xad, 0xd, 0xc3, 0xf4, 0xe8, 0xb5, 0xdf, 0xc4,
        0xc9, 0x29, 0xca, 0x92, 0x4b,
    ]);
    let expected = Digest::from_public_slice(&[
        0x87, 0xa3, 0x9a, 0xf, 0x28, 0xee, 0x20, 0xaa, 0x5d, 0x35, 0xc6, 0xf5, 0x60, 0x71, 0x83,
        0x50, 0xbe, 0x24, 0xbf, 0x9d, 0xd6, 0xc7, 0x65, 0x70, 0xfa, 0xcc, 0x8, 0x5a, 0x42, 0xd2,
        0xb2, 0x3c,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_51() {
    let input = ByteSeq::from_public_slice(&[
        0x7d, 0x5d, 0x42, 0x62, 0x68, 0x49, 0xc, 0x42, 0x85, 0x77, 0x5b, 0xaa, 0xd7, 0x2, 0xaa,
        0x38, 0xc1, 0x4e, 0x40, 0x5e, 0x48, 0xe5, 0xd6, 0x30, 0x1b, 0xf9, 0xac, 0x2b, 0x2b, 0x4,
        0x55, 0x5, 0x5, 0xd3, 0x95, 0x9d, 0xbc, 0x60, 0x42, 0xa5, 0xa4, 0xc9, 0x9a, 0xd0, 0xaf,
        0xf4, 0x2, 0x48, 0x3f, 0x25, 0x2,
    ]);
    let expected = Digest::from_public_slice(&[
        0x80, 0x66, 0xb8, 0x3f, 0xa9, 0x45, 0x6d, 0x4b, 0xa1, 0x5a, 0xb1, 0x13, 0x9e, 0x19, 0x5a,
        0xc4, 0x90, 0x8e, 0xaa, 0x43, 0x36, 0xec, 0xf8, 0x64, 0x89, 0xa, 0xf6, 0xd7, 0xd8, 0x71,
        0x15, 0x31,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_52() {
    let input = ByteSeq::from_public_slice(&[
        0xe3, 0xc8, 0x31, 0x27, 0x9d, 0x1, 0xc0, 0xd5, 0xb2, 0xb5, 0xcc, 0xf9, 0xe9, 0x7c, 0x18,
        0x76, 0x5, 0xe8, 0x92, 0xe4, 0x88, 0x7f, 0xf1, 0x79, 0x9b, 0xac, 0x12, 0x2b, 0x23, 0x96,
        0x88, 0x2f, 0x8, 0xdd, 0xd8, 0xff, 0xf6, 0x5a, 0x0, 0x79, 0x2b, 0xf2, 0xba, 0x3f, 0x11,
        0x8a, 0xd, 0x95, 0x69, 0x1b, 0x0, 0x27,
    ]);
    let expected = Digest::from_public_slice(&[
        0x96, 0x71, 0xe3, 0x62, 0x23, 0x40, 0xe8, 0x39, 0xf, 0x82, 0xef, 0x98, 0x6f, 0x8b, 0x50,
        0x7d, 0x12, 0x4f, 0x55, 0x78, 0x34, 0xec, 0x3d, 0xbc, 0xee, 0x8c, 0xc8, 0xf9, 0x29, 0xca,
        0x90, 0xc2,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_53() {
    let input = ByteSeq::from_public_slice(&[
        0xe3, 0x96, 0x4, 0x57, 0x1d, 0x68, 0xd4, 0xd8, 0x77, 0xb9, 0x5e, 0xac, 0x3, 0x28, 0xc4,
        0x85, 0x34, 0xd4, 0x5, 0x89, 0x4a, 0x29, 0x86, 0x5a, 0x4b, 0x7f, 0xb3, 0xd9, 0xa4, 0xc2,
        0x5b, 0xa6, 0x2, 0x95, 0x30, 0x82, 0x12, 0x23, 0x9c, 0x32, 0x5a, 0xbc, 0xf9, 0x73, 0xc2,
        0x4, 0x84, 0x72, 0x8b, 0x7d, 0xdd, 0xfa, 0x31,
    ]);
    let expected = Digest::from_public_slice(&[
        0xc6, 0xb7, 0x6b, 0x1c, 0x1b, 0xea, 0xf4, 0x1d, 0x9d, 0x38, 0x25, 0x11, 0x20, 0x9a, 0x12,
        0xa, 0xf2, 0xf2, 0xdd, 0x7d, 0x1, 0xc8, 0x9c, 0x91, 0xf3, 0xe8, 0xce, 0x76, 0x1e, 0xc3,
        0xb, 0xd,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_54() {
    let input = ByteSeq::from_public_slice(&[
        0x6b, 0xff, 0x3e, 0x92, 0xfe, 0xf2, 0x9c, 0x70, 0xa, 0xd4, 0x96, 0x4c, 0x7a, 0x9b, 0x68,
        0xb, 0x4f, 0x7e, 0xc5, 0xde, 0xff, 0xc2, 0x2e, 0x5, 0x59, 0x4c, 0x47, 0x8c, 0x2f, 0x22,
        0x34, 0x17, 0xb, 0xb2, 0xb, 0x4, 0x23, 0x4e, 0x7, 0x1b, 0xb4, 0x25, 0x5c, 0x4, 0xc3, 0x8,
        0x69, 0xfc, 0xcd, 0xb7, 0xdd, 0xd2, 0x91, 0x2a,
    ]);
    let expected = Digest::from_public_slice(&[
        0x80, 0xcb, 0xb6, 0xa, 0x7e, 0x53, 0x39, 0xcb, 0xc1, 0xfb, 0x93, 0x34, 0xc, 0x13, 0x84,
        0xde, 0x22, 0xb0, 0xea, 0x8d, 0xf7, 0x50, 0x83, 0xd5, 0x80, 0x1b, 0xe, 0x95, 0xa7, 0x5c,
        0xe1, 0x52,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_55() {
    let input = ByteSeq::from_public_slice(&[
        0x9, 0x60, 0x0, 0x4e, 0x3e, 0x83, 0x86, 0x49, 0xd6, 0x73, 0xe7, 0x62, 0xd4, 0xcb, 0x39,
        0xba, 0xc, 0xba, 0xcb, 0x9b, 0x8, 0x94, 0x3d, 0x2d, 0xe9, 0x49, 0x94, 0x19, 0xc5, 0xf6,
        0xfa, 0x1d, 0x85, 0xec, 0xa8, 0x25, 0xea, 0xf3, 0x77, 0x81, 0x7c, 0x3e, 0x24, 0x8c, 0xe2,
        0x89, 0x25, 0xaa, 0x9, 0x8b, 0x75, 0xe1, 0x65, 0xe3, 0x43,
    ]);
    let expected = Digest::from_public_slice(&[
        0x57, 0x64, 0x33, 0x41, 0xcd, 0x42, 0x85, 0x12, 0x7f, 0x68, 0x9a, 0xb5, 0xdd, 0xe, 0xa6,
        0xd0, 0x69, 0xa5, 0x6a, 0xd1, 0x93, 0xba, 0xf3, 0x3f, 0x50, 0x72, 0xe4, 0xa3, 0xc2, 0xe9,
        0x8a, 0x91,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_56() {
    let input = ByteSeq::from_public_slice(&[
        0xc3, 0x40, 0xab, 0x12, 0x7a, 0x84, 0x30, 0xee, 0xbe, 0x33, 0x76, 0xa1, 0x13, 0xc3, 0x54,
        0xf3, 0x92, 0xb6, 0x57, 0xc3, 0x49, 0x9, 0xef, 0x63, 0xae, 0x9e, 0x19, 0x79, 0x8b, 0xac,
        0x1e, 0xf8, 0x18, 0xaa, 0xb2, 0x87, 0xde, 0x3d, 0x85, 0xea, 0x6c, 0x2c, 0x9f, 0x70, 0x40,
        0x5d, 0xd5, 0x94, 0x85, 0xe9, 0x33, 0x9c, 0xe0, 0x8f, 0xc8, 0x79,
    ]);
    let expected = Digest::from_public_slice(&[
        0xb6, 0xd0, 0xce, 0x30, 0xe3, 0x3c, 0x8e, 0x5d, 0x7a, 0x67, 0x18, 0x19, 0x49, 0xf7, 0xc,
        0x38, 0xec, 0xac, 0x82, 0x49, 0xa2, 0xe1, 0x7a, 0x35, 0x63, 0x14, 0xef, 0x54, 0x2c, 0xc6,
        0xa6, 0xcd,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_57() {
    let input = ByteSeq::from_public_slice(&[
        0x2c, 0x20, 0x68, 0x16, 0xd1, 0xf7, 0xb3, 0x99, 0xa9, 0x73, 0x4d, 0x10, 0x5e, 0xb6, 0xcb,
        0x32, 0xd9, 0xb5, 0x96, 0x3a, 0xda, 0x97, 0xc9, 0xfe, 0xcc, 0x33, 0x25, 0x8e, 0x65, 0xbd,
        0x9f, 0x79, 0xb3, 0x1b, 0x99, 0xe0, 0x84, 0x42, 0xdf, 0x6a, 0xc, 0xdc, 0x54, 0xfc, 0xe2,
        0x4a, 0x55, 0xd5, 0x10, 0x60, 0xd5, 0xba, 0xfa, 0x92, 0xeb, 0x7f, 0x57,
    ]);
    let expected = Digest::from_public_slice(&[
        0x3e, 0x2a, 0xf5, 0xc5, 0x58, 0xf6, 0x50, 0x63, 0xd6, 0xb, 0x81, 0xc4, 0x4d, 0x8f, 0xd2,
        0xad, 0xc5, 0x5b, 0xd9, 0x43, 0x2c, 0xda, 0x1d, 0x82, 0xb9, 0xf7, 0x27, 0xa6, 0xe9, 0x68,
        0x8d, 0xe8,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_58() {
    let input = ByteSeq::from_public_slice(&[
        0x38, 0xe4, 0xa8, 0x2, 0x76, 0x93, 0x33, 0x66, 0x3b, 0xbb, 0xba, 0x27, 0x9e, 0xd2, 0x56,
        0x5, 0x2f, 0x4a, 0x89, 0xe6, 0x71, 0xbe, 0xdb, 0x31, 0xae, 0x4, 0xc, 0xf6, 0xf8, 0xfd,
        0x7a, 0xa0, 0x5c, 0x59, 0x64, 0xa2, 0x98, 0x56, 0x62, 0x42, 0xda, 0x28, 0xe6, 0x3c, 0xa2,
        0x66, 0x3a, 0x68, 0x75, 0xe1, 0x31, 0x22, 0x44, 0x70, 0x61, 0x27, 0x67, 0xf,
    ]);
    let expected = Digest::from_public_slice(&[
        0xe2, 0xec, 0x64, 0x86, 0xc4, 0xa0, 0x7b, 0x4b, 0x87, 0x6b, 0x65, 0xa6, 0x5c, 0xaa, 0x3e,
        0x6e, 0xc9, 0x6f, 0x31, 0xfd, 0xe5, 0x5f, 0xe4, 0x69, 0xc7, 0x53, 0x60, 0x3a, 0x97, 0x2b,
        0x7f, 0x10,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_59() {
    let input = ByteSeq::from_public_slice(&[
        0x4d, 0xba, 0x91, 0xff, 0xcb, 0x22, 0xa1, 0x77, 0xd9, 0xa9, 0x66, 0x61, 0x92, 0x91, 0xab,
        0xb4, 0xe7, 0xe0, 0xe8, 0x51, 0xdf, 0x7a, 0xe4, 0xff, 0x2d, 0xd3, 0xa3, 0x12, 0x94, 0xa5,
        0x1c, 0x31, 0x38, 0xdc, 0x56, 0xdc, 0x20, 0xd, 0x3a, 0x59, 0xce, 0xcd, 0x86, 0xf9, 0x8d,
        0x9e, 0x80, 0x63, 0x8c, 0xb2, 0x58, 0xae, 0x2e, 0x7d, 0x39, 0xdd, 0x6f, 0xf0, 0x38,
    ]);
    let expected = Digest::from_public_slice(&[
        0xe7, 0xc4, 0xfc, 0x13, 0xa1, 0x2e, 0x58, 0x94, 0xf0, 0xf5, 0x17, 0x95, 0x89, 0x7e, 0xe6,
        0x76, 0x7f, 0x21, 0xb2, 0x12, 0x9c, 0xe3, 0xd4, 0x75, 0x8a, 0x4c, 0x4b, 0x6e, 0xdb, 0xdc,
        0x1f, 0xf4,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_60() {
    let input = ByteSeq::from_public_slice(&[
        0x7d, 0xf3, 0xd7, 0x7a, 0xe2, 0xea, 0x9b, 0x4e, 0x7c, 0x14, 0x63, 0x64, 0xa3, 0xdf, 0xdb,
        0x3, 0x30, 0x77, 0x88, 0xf6, 0x38, 0xbb, 0x8, 0x17, 0xed, 0x8b, 0x9f, 0x1d, 0x2d, 0x7,
        0x16, 0xbe, 0xad, 0xc3, 0x4b, 0x80, 0x8c, 0x8b, 0x63, 0xfe, 0xd3, 0xe6, 0xd5, 0x1d, 0x4,
        0x8d, 0x4f, 0x47, 0x10, 0xcb, 0x7d, 0x47, 0xf2, 0x4e, 0xab, 0xfc, 0x25, 0xfa, 0x4, 0xf5,
    ]);
    let expected = Digest::from_public_slice(&[
        0x7, 0x2a, 0x53, 0x2f, 0xf8, 0xd7, 0x63, 0xf7, 0x25, 0x6d, 0xa2, 0x55, 0x54, 0x4b, 0x81,
        0x6, 0xa4, 0x9e, 0xbb, 0x6, 0xdf, 0x5a, 0x85, 0xd1, 0xfe, 0xc6, 0x62, 0xa9, 0xd4, 0x81,
        0x10, 0x5,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_61() {
    let input = ByteSeq::from_public_slice(&[
        0x2, 0x26, 0xbd, 0x5a, 0xcc, 0xc0, 0x66, 0xc6, 0xa0, 0x62, 0x7, 0xff, 0xfc, 0x8e, 0x41,
        0x8a, 0x4, 0xb7, 0x1d, 0xed, 0x6e, 0x82, 0x10, 0xf8, 0xd6, 0x34, 0x3a, 0x99, 0x80, 0x7f,
        0xc0, 0x2a, 0x11, 0x8a, 0x7b, 0x8d, 0x65, 0x10, 0xcb, 0x94, 0x68, 0xfb, 0x14, 0x5c, 0x0,
        0xae, 0x4f, 0x68, 0x66, 0xc0, 0x9c, 0xf, 0x46, 0x77, 0xd6, 0x35, 0x45, 0x0, 0x52, 0x90,
        0x64,
    ]);
    let expected = Digest::from_public_slice(&[
        0x3d, 0xdc, 0xe1, 0x21, 0xdd, 0x14, 0xfc, 0x95, 0x4d, 0x18, 0x5c, 0x4b, 0x1e, 0x4a, 0x29,
        0x11, 0x5, 0xde, 0x6e, 0x9b, 0x9c, 0xfa, 0x43, 0x6a, 0xe4, 0x28, 0x9b, 0xd7, 0x95, 0x92,
        0x42, 0x66,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_62() {
    let input = ByteSeq::from_public_slice(&[
        0xbd, 0x95, 0x89, 0xf4, 0x83, 0xed, 0xe6, 0x68, 0xe9, 0x6d, 0xb1, 0xfb, 0x95, 0x22, 0xf2,
        0x4d, 0xf7, 0x91, 0x26, 0x2a, 0xa7, 0xc1, 0x2, 0xb2, 0x6a, 0xa6, 0x7f, 0x88, 0xcf, 0x15,
        0x7a, 0x13, 0x9d, 0xe9, 0xcd, 0x5b, 0x3c, 0xcc, 0x8d, 0xec, 0x4d, 0x7c, 0xc3, 0xee, 0x68,
        0x28, 0xd5, 0x90, 0xb1, 0xbe, 0xa, 0xe2, 0x9e, 0x15, 0x2d, 0x98, 0xe5, 0x44, 0xd, 0x34,
        0x22, 0x59,
    ]);
    let expected = Digest::from_public_slice(&[
        0xae, 0x1b, 0x10, 0x7e, 0x46, 0x30, 0x1d, 0xe9, 0x1f, 0x3a, 0xa2, 0xf6, 0xd6, 0xaf, 0xcc,
        0x82, 0x86, 0xef, 0xc7, 0xbd, 0x69, 0xc3, 0xed, 0xca, 0x40, 0xab, 0xe3, 0x7, 0x9e, 0x84,
        0x0, 0xa8,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_63() {
    let input = ByteSeq::from_public_slice(&[
        0x1, 0x7b, 0x9d, 0x4c, 0xb4, 0x3e, 0x4, 0xa1, 0x1f, 0xaa, 0xc1, 0x5f, 0xf9, 0x3a, 0xff,
        0xe0, 0x3e, 0x13, 0x2a, 0x7, 0x17, 0x1d, 0xcc, 0xb5, 0xd1, 0xf1, 0x6f, 0x27, 0xc1, 0x14,
        0xb4, 0x57, 0x90, 0x78, 0xd0, 0x73, 0xc7, 0x82, 0xa6, 0xe7, 0xab, 0x56, 0x79, 0xaa, 0x2f,
        0x55, 0x74, 0x3e, 0xb7, 0x60, 0x6f, 0x60, 0xe6, 0x22, 0xff, 0x48, 0x35, 0xb, 0xe7, 0x30,
        0x8, 0x2e, 0xb1,
    ]);
    let expected = Digest::from_public_slice(&[
        0x91, 0xe, 0x3f, 0x8e, 0x15, 0xd2, 0x5e, 0x31, 0xaf, 0xed, 0x7f, 0x43, 0x76, 0xd8, 0xc9,
        0xee, 0x53, 0xa0, 0xb8, 0xfd, 0xd6, 0x8a, 0x66, 0x36, 0x6b, 0xc6, 0xc6, 0xc9, 0xab, 0x97,
        0x2, 0x26,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}

#[test]
fn tg_gimli_hash_64() {
    let input = ByteSeq::from_public_slice(&[
        0x7d, 0x3c, 0x76, 0x7f, 0x41, 0x74, 0xd, 0x8f, 0x96, 0x39, 0x3, 0x8b, 0x89, 0x6f, 0xe0,
        0xc4, 0x89, 0x7f, 0x88, 0x60, 0x8e, 0xa2, 0x26, 0x92, 0x5b, 0xc3, 0x9e, 0x48, 0x50, 0xb5,
        0x18, 0x4f, 0x1c, 0x7c, 0xf1, 0x28, 0x5e, 0xbf, 0x45, 0x26, 0x21, 0xa1, 0x9a, 0x4c, 0x33,
        0xe1, 0x45, 0x6b, 0x2a, 0xe8, 0x83, 0x39, 0x6d, 0xe, 0x1d, 0x6b, 0x76, 0xc5, 0xf0, 0xcb,
        0xe4, 0xd7, 0x5b, 0xeb,
    ]);
    let expected = Digest::from_public_slice(&[
        0x60, 0xe3, 0x43, 0xfe, 0x19, 0x31, 0xf9, 0xec, 0x84, 0xd, 0xfb, 0x56, 0x4e, 0x6, 0x68,
        0x54, 0xf3, 0x4b, 0x5a, 0x58, 0x2, 0x9a, 0x63, 0xd8, 0x67, 0xe7, 0xf8, 0xd2, 0x31, 0x81,
        0x52, 0x9c,
    ]);

    let out = gimli_hash(&input);
    assert_secret_array_eq!(expected, out, U8);
}
